@using ExpressiveAnnotations.MvcWebSample
@using ExpressiveAnnotations.MvcWebSample.Misc
@model ExpressiveAnnotations.MvcWebSample.Models.Query

@{ var lang = System.Threading.Thread.CurrentThread.CurrentCulture.TwoLetterISOLanguageName; }

<div class="box">
    <div class="left-corner">
        <h1>ExpressiveAnnotations - annotation-based conditional validation</h1>
    </div>
    <div class="right-corner">
        <a href="https://github.com/JaroslawWaliszko/ExpressiveAnnotations">[more on github]</a>
    </div>
</div>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <div class="message-success">@(ViewBag.Success ?? Html.Raw("&nbsp;"))</div>

    <fieldset>
        <legend>Usage sample for model validation in ASP.NET MVC</legend>
        <div class="box-small">
            <div class="right-corner">
                @Html.Partial("_Culture")
                @Html.Partial("_Validation")
            </div>
        </div>
        <ol>
            <li>
                @Html.CheckBoxFor(model => model.GoAbroad)
                @Html.LabelFor(model => model.GoAbroad, new { @class = "inline" })
                @Html.ValidationMessageFor(model => model.GoAbroad)
            </li>
            <li>
                <pre class="code">
[Required]
</pre>
                <pre class="action">[show attribute]</pre>
                @Html.LabelFor(model => model.Age, new { @class = "inline prefix" })
                @Html.DropDownListFor(x => x.Age, new SelectList(Model.Years, null))
                @Html.ValidationMessageFor(model => model.Age)
            </li>
            <li>
                <pre class="code">
[RequiredIf("GoAbroad == true")]
[AssertThat("IsDigitChain(PassportNumber)")]
</pre>
                <pre class="action">[show attribute]</pre>
                @Html.LabelFor(model => model.PassportNumber, new { @class = "inline prefix" })
                @Html.TextBoxFor(model => model.PassportNumber)
                @Html.ValidationMessageFor(model => model.PassportNumber)
            </li>
            <li>
                @Html.LabelFor(model => model.Country, new { @class = "inline prefix" })
                @Html.DropDownListFor(x => x.Country, new SelectList(Model.Countries, "Value", "Text"))
                @Html.ValidationMessageFor(model => model.Country)
            </li>
            <li>
                @Html.LabelFor(model => model.NextCountry, new { @class = "inline prefix" })
                @Html.DropDownListFor(x => x.NextCountry, new SelectList(Model.Countries, "Value", "Text"))
                @Html.ValidationMessageFor(model => model.NextCountry)
            </li>
            <li>
                <pre class="code">
[RequiredIf("GoAbroad == true " +
            "&& (" +
                    "(NextCountry != 'Other' && NextCountry == Country) " +
                    "|| (Age > 24 && Age &le; 55)" +
                ")")]
</pre>
                <pre class="action">[show attribute]</pre>
                @Html.LabelFor(model => model.ReasonForTravel, new { @class = "inline prefix" })
                @Html.TextAreaFor(model => model.ReasonForTravel)
                @Html.ValidationMessageFor(model => model.ReasonForTravel)
            </li>
            <li>
                @Html.EditorFor(x => x.LatestSuggestedReturnDate)   @*hidden backing field storing date in RFC 2822 or ISO 8601 format*@
                <pre class="code">
[RequiredIf("GoAbroad == true")]
[AssertThat("ReturnDate >= Today()")]
</pre>
                <pre class="action">[show attribute]</pre>
                @Html.LabelFor(model => model.ReturnDate, new { @class = "inline prefix" })
                @Html.TextBoxFor(x => x.ReturnDate) @Resources.LatestSuggestedReturnDate: @Model.LatestSuggestedReturnDate.ToString(lang == "pl" ? "yyyy-MM-dd" : "MM/dd/yyyy")
                @Html.ValidationMessageFor(model => model.ReturnDate)
            </li>
            <li>
                <pre class="code">
[RequiredIf("GoAbroad == true && ReturnDate > LatestSuggestedReturnDate")]
</pre>
                <pre class="action">[show attribute]</pre>
                @Html.LabelFor(model => model.ReasonForLongTravel, new { @class = "inline prefix" })
                @Html.TextAreaFor(x => x.ReasonForLongTravel)
                @Html.ValidationMessageFor(model => model.ReasonForLongTravel)
            </li>
            <li>
                <pre class="code">
[RequiredIf("GoAbroad == true")]  
</pre>
                <pre class="action">[show attribute]</pre>
                @Html.LabelFor(model => model.PoliticalStability, new { @class = "inline prefix" })
                @Html.EnumDropDownListFor(x => x.PoliticalStability)
                @Html.ValidationMessageFor(model => model.PoliticalStability)
            </li>
            <li>
                <pre class="code">
[AssertThat("(" +
            "    AwareOfTheRisks == true " +
            "    && (PoliticalStability == Stability.Low || PoliticalStability == Stability.Uncertain)" +
            ") " +
            "|| PoliticalStability == null || PoliticalStability == Stability.High")]
</pre>
                <pre class="action">[show attribute]</pre>
                @Html.CheckBoxFor(model => model.AwareOfTheRisks)
                @Html.LabelFor(model => model.AwareOfTheRisks, new { @class = "inline" })
                @Html.ValidationMessageFor(model => model.AwareOfTheRisks)
            </li>
            <li>
                @Html.LabelFor(model => model.SportType, new { @class = "inline prefix" })
                @foreach (var item in Model.Sports)
                {
                    @Html.RadioButtonFor(m => m.SportType, item.Value) <label class="inline">@item.Text</label>
                }
                @Html.ValidationMessageFor(model => model.SportType)
            </li>
            <li>
                <pre class="code">
[RequiredIf("SportType == 'Extreme' || (SportType != 'None' && GoAbroad == true)")]
[AssertThat("IsBloodType(Trim(BloodType))"]
</pre>
                <pre class="action">[show attribute]</pre>
                @Html.LabelFor(model => model.BloodType, new { @class = "inline prefix" })
                @Html.TextBoxFor(model => model.BloodType)
                @Html.ValidationMessageFor(model => model.BloodType)
            </li>
            <li>
                @Html.EditorFor(model => model.ContactDetails)
            </li>
            <li>
                <pre class="code">
[AssertThat("AgreeForContact == true")]
</pre>
                <pre class="action">[show attribute]</pre>
                @Html.RadioButtonFor(model => model.AgreeForContact, true) <label class="inline">@Resources.SpamAllowed</label>
                @Html.RadioButtonFor(model => model.AgreeForContact, false) <label class="inline">@Resources.SpamForbidden</label>
                @Html.ValidationMessageFor(model => model.AgreeForContact)
            </li>
            <li>
                <pre class="code">
[RequiredIf("AgreeForContact == true && (ContactDetails.Email != null || ContactDetails.Phone != null)")]
</pre>
                <pre class="action">[show attribute]</pre>
                @Html.LabelFor(model => model.ImmediateContact, new { @class = "inline prefix" })
                @Html.DropDownListFor(model => model.ImmediateContact, new SelectList(Model.Answers, "Value", "Text"))
                @Html.ValidationMessageFor(model => model.ImmediateContact)
            </li>
            <li>
                <pre class="code">
[AssertThat("FlightId != Guid('00000000-0000-0000-0000-000000000000') && " +
            "FlightId != Guid('11111111-1111-1111-1111-111111111111'")]
</pre>
                <pre class="action">[show attribute]</pre>
                @Html.LabelFor(model => model.FlightId, new { @class = "inline prefix" })
                @Html.EditorFor(model => model.FlightId)
                @Html.ValidationMessageFor(model => model.FlightId)
            </li>
        </ol>
        <input type="submit" />
    </fieldset>
}

@section Scripts {
    @if ("client".Equals(ViewBag.Validation))
    {
        @Scripts.Render("~/bundles/jqueryval")
        @Scripts.Render("~/bundles/expressive")

        <script>
            // var expann = ea.noConflict(); expann.addMethod... - in case of conflict
            ea.addMethod('IsBloodType', function (group) { return /^(A|B|AB|0)[\+-]$/.test(group); });
        </script>
    }

    <script>
        $(document).ready(function() {
            $('.action').click(function() {
                $(this).hide();
                $(this).parent().find('.code').toggle('slow');
            });
            $("#ReturnDate").datepicker($.datepicker.regional["@lang"]);
        });

        $.datepicker.regional['pl'] = {
            closeText: 'Zamknij',
            prevText: '&#x3C;Poprzedni',
            nextText: 'Następny&#x3E;',
            currentText: 'Dziś',
            monthNames: ['Styczeń', 'Luty', 'Marzec', 'Kwiecień', 'Maj', 'Czerwiec', 'Lipiec', 'Sierpień', 'Wrzesień', 'Październik', 'Listopad', 'Grudzień'],
            monthNamesShort: ['Sty', 'Lu', 'Mar', 'Kw', 'Maj', 'Cze', 'Lip', 'Sie', 'Wrz', 'Pa', 'Lis', 'Gru'],
            dayNames: ['Niedziela', 'Poniedziałek', 'Wtorek', 'Środa', 'Czwartek', 'Piątek', 'Sobota'],
            dayNamesShort: ['Nie', 'Pn', 'Wt', 'Śr', 'Czw', 'Pt', 'So'],
            dayNamesMin: ['N', 'Pn', 'Wt', 'Śr', 'Cz', 'Pt', 'So'],
            weekHeader: 'Tydz',
            dateFormat: 'yy-mm-dd',
            firstDay: 1,
            isRTL: false,
            showMonthAfterYear: false,
            yearSuffix: ''
        };
    </script>
}